Converting one of the master nodes to worker
=====================================

1.Download kubelet, kubectl, kubeproxy binaries 
 scp 172.31.22.217:/usr/local/bin/kubelet /usr/local/bin/kubelet
scp 172.31.22.217:/usr/local/bin/kube-proxy /usr/local/bin/


wget -q --show-progress --https-only --timestamping \
  https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl \
  https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kube-proxy \
  https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubelet

chmod +x kubectl kube-proxy kubelet
cp kubectl kube-proxy kubelet /usr/local/bin/


2. Make below directories
mkdir -p  /etc/cni/net.d   /opt/cni/bin   /var/lib/kubelet   /var/lib/kube-proxy   /var/lib/kubernetes   /var/run/kubernetes

3. Ensure you have docker installed on the node which you want to convert as worker
apt-get update
apt-get install     apt-transport-https     ca-certificates     curl     gnupg-agent     software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
apt-key fingerprint 0EBFCD88
add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) 122     stable"
apt-get update
apt-get install docker-ce docker-ce-cli containerd.io
docker run hello-world
docker ps -a

4. As we configured TLS to add the workers through Certificate
kubectl config --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig set-cluster bootstrap --server='https://172.31.29.55:6443' --certificate-authority=/var/lib/kubernetes/ca.crt
kubectl config --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig set-credentials kubelet-bootstrap --token=07401b.f395accd246ae52d
kubectl config --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig set-context bootstrap --user=kubelet-bootstrap --cluster=bootstrap
kubectl config --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig use-context bootstrap


5. Enable resolved service, since it was mentioned in kube-proxy to export to pods from worker nodes.
#systemctl start systemd-resolved.service
#systemctl enable systemd-resolved.service
Created symlink from /etc/systemd/system/multi-user.target.wants/systemd-resolved.service to /lib/systemd/system/systemd-resolved.service.


Kubelet
========
6. Create the kubelet-config.yaml configuration file:

cat <<EOF | sudo tee /var/lib/kubelet/kubelet-config.yaml
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
authentication:
  anonymous:
    enabled: false
  webhook:
    enabled: true
  x509:
    clientCAFile: "/var/lib/kubernetes/ca.crt"
authorization:
  mode: Webhook
clusterDomain: "cluster.local"
clusterDNS:
  - "10.96.0.10"
resolvConf: "/run/systemd/resolve/resolv.conf"
runtimeRequestTimeout: "15m"
EOF

7. Configure Kubelet Service
Create the kubelet.service systemd unit file:

cat <<EOF | sudo tee /etc/systemd/system/kubelet.service
[Unit]
Description=Kubernetes Kubelet
Documentation=https://github.com/kubernetes/kubernetes
After=docker.service
Requires=docker.service

[Service]
ExecStart=/usr/local/bin/kubelet \\
  --bootstrap-kubeconfig="/var/lib/kubelet/bootstrap-kubeconfig" \\
  --config=/var/lib/kubelet/kubelet-config.yaml \\
  --image-pull-progress-deadline=2m \\
  --kubeconfig=/var/lib/kubelet/kubeconfig \\
  --cert-dir=/var/lib/kubelet/pki/ \\
  --rotate-certificates=true \\
  --rotate-server-certificates=true \\
  --network-plugin=cni \\
  --register-node=true \\
  --v=2
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

Kube-Proxy
===========
8. Configure the Kubernetes Proxy

Get the proxy configuration from master node
scp -r rameshhms1c.mylabserver.com:/root/keys/kube-proxy.kubeconfig /var/lib/kube-proxy/kubeconfig

9. Create the kube-proxy-config.yaml configuration file:

cat <<EOF | sudo tee /var/lib/kube-proxy/kube-proxy-config.yaml
kind: KubeProxyConfiguration
apiVersion: kubeproxy.config.k8s.io/v1alpha1
clientConnection:
  kubeconfig: "/var/lib/kube-proxy/kubeconfig"
mode: "iptables"
clusterCIDR: "172.31.0.0/20"
EOF

cat <<EOF | sudo tee /etc/systemd/system/kube-proxy.service
[Unit]
Description=Kubernetes Kube Proxy
Documentation=https://github.com/kubernetes/kubernetes

[Service]
ExecStart=/usr/local/bin/kube-proxy \\
  --config=/var/lib/kube-proxy/kube-proxy-config.yaml
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF


10. Deploy weave binaries 
    ========================
wget https://github.com/containernetworking/plugins/releases/download/v0.7.5/cni-plugins-amd64-v0.7.5.tgz
tar -xzvf cni-plugins-amd64-v0.7.5.tgz --directory /opt/cni/bin/

11. Start the Worker Services
#systemctl daemon-reload
#systemctl enable kubelet kube-proxy
#systemctl start kubelet kube-proxy
#systemctl status kubelet kube-proxy

by now you would be able to view the master node in NOTREADY State.

12.Approve Server CSR from any master node
     ==================================
#kubectl get csr
NAME                                                   AGE   REQUESTOR                 CONDITION
csr-95bv6                                              20s   system:node:worker-2      Pending
Approve

13. kubectl certificate approve csr-95bv6



